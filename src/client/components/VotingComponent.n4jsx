import {increaseChoiceCount} from "client/actions/IncreaseVoteCountAction";
import ChoiceBar from "client/components/ChoiceBar";
import {Choice} from "client/components/VotingComponentProps";
import {Vote} from "client/components/VotingComponentProps";
import {VotingComponentProps} from "client/components/VotingComponentProps";
import {StoreState} from "client/store/StoreState";
import {connect} from "@n4jsd/react-redux";
import {ReduxAction} from "@n4jsd/redux";
import * as React from 'react';


class VotingComponent extends React.Component<VotingComponentProps, Object> {
	
	public constructor(props: VotingComponentProps) {
		super(props);
	}

    @Override
    public render(): React.Element<?> {
        const { vote, increaseChoiceCount } = this.props;
        console.log(`VotingComponent.props = `, this.props);
        
        const totalVotes = vote.choices.reduce(
        	(prev, curr) => prev + curr.count, 0);

        return (
            <div className="Row VotingRow Spacer">
                <div className="Head">
                    <h1 className="Title">{vote.title}
                        <div className="Badge">{totalVotes + "Votes"}</div>
                    </h1>
                </div>
                <div className="Description Emphasis">
                 {vote.description}
                </div>
                <div>
                	{vote.choices.map(choice => 
                		<ChoiceBar
                			key={choice.id}
                			onClick={() => increaseChoiceCount(choice.id, choice.count) }
                			percent={choice.count * (100 / totalVotes)} 
                			{...choice} />
                	)}
                </div>
            </div>
        );
    }

}
//
//VotingComponent.propTypes = {
//    vote: React.PropTypes.object.isRequired
//}

/**
 * Map redux state to VotingComponent's props
 */
function mapStateToProps(state: StoreState): VotingComponentProps  {
	console.log('mapStateToProps is called, state = ', state);
	
	return { vote: new Vote({
			title: state.vote.title,
			description: state.vote.description,
			choices: state.vote.choices.map(choice => new Choice({ 
				id : choice.id,
				title: choice.title,
				count: choice.count}))
	})};
}

/**
 * Dispatch actions
 */
function mapDispatchToProps(dispatch: {function(ReduxAction): any}) {
	console.log('mapDispatchToProps is called');
	return {
		increaseChoiceCount: (choiceId: string, currentCount: int) => {
			dispatch(increaseChoiceCount(choiceId, currentCount))	
		}
	}
}

/**
 * Connect React component with Redux store
 */
export public const ConnectedVotingComponent = connect(mapStateToProps, mapDispatchToProps)(VotingComponent);
